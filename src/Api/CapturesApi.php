<?php
/**
 * CapturesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Klarna\OrderManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klarna Order Managment API
 *
 * The Order Management API is used for handling an order after the customer has completed the purchase. It is used for all actions you need to manage your orders. Examples being: updating, capturing, reading and refunding an order.  Read more on the [Order management](https://docs.klarna.com/order-management/) process.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Klarna\OrderManagement\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Klarna\ApiException;
use Klarna\Configuration;
use Klarna\HeaderSelector;
use Klarna\ObjectSerializer;

/**
 * CapturesApi Class Doc Comment
 *
 * @category Class
 * @package  Klarna\OrderManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CapturesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'appendShippingInfo' => [
            'application/json',
        ],
        'captureOrder' => [
            'application/json',
        ],
        'extendDueDate' => [
            'application/json',
        ],
        'getCapture' => [
            'application/json',
        ],
        'getCaptures' => [
            'application/json',
        ],
        'getOptionsForExtendDueDate' => [
            'application/json',
        ],
        'triggerSendOut' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation appendShippingInfo
     *
     * Add shipping info to a capture
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\UpdateShippingInfo $update_shipping_info update_shipping_info (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appendShippingInfo'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appendShippingInfo($capture_id, $order_id, $klarna_idempotency_key = null, $update_shipping_info = null, string $contentType = self::contentTypes['appendShippingInfo'][0])
    {
        $this->appendShippingInfoWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key, $update_shipping_info, $contentType);
    }

    /**
     * Operation appendShippingInfoWithHttpInfo
     *
     * Add shipping info to a capture
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\UpdateShippingInfo $update_shipping_info (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appendShippingInfo'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appendShippingInfoWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key = null, $update_shipping_info = null, string $contentType = self::contentTypes['appendShippingInfo'][0])
    {
        $request = $this->appendShippingInfoRequest($capture_id, $order_id, $klarna_idempotency_key, $update_shipping_info, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\NotAllowedErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appendShippingInfoAsync
     *
     * Add shipping info to a capture
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\UpdateShippingInfo $update_shipping_info (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appendShippingInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appendShippingInfoAsync($capture_id, $order_id, $klarna_idempotency_key = null, $update_shipping_info = null, string $contentType = self::contentTypes['appendShippingInfo'][0])
    {
        return $this->appendShippingInfoAsyncWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key, $update_shipping_info, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appendShippingInfoAsyncWithHttpInfo
     *
     * Add shipping info to a capture
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\UpdateShippingInfo $update_shipping_info (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appendShippingInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appendShippingInfoAsyncWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key = null, $update_shipping_info = null, string $contentType = self::contentTypes['appendShippingInfo'][0])
    {
        $returnType = '';
        $request = $this->appendShippingInfoRequest($capture_id, $order_id, $klarna_idempotency_key, $update_shipping_info, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appendShippingInfo'
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\UpdateShippingInfo $update_shipping_info (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appendShippingInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function appendShippingInfoRequest($capture_id, $order_id, $klarna_idempotency_key = null, $update_shipping_info = null, string $contentType = self::contentTypes['appendShippingInfo'][0])
    {

        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling appendShippingInfo'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling appendShippingInfo'
            );
        }




        $resourcePath = '/ordermanagement/v1/orders/{order_id}/captures/{capture_id}/shipping-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($klarna_idempotency_key !== null) {
            $headerParams['Klarna-Idempotency-Key'] = ObjectSerializer::toHeaderValue($klarna_idempotency_key);
        }

        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'capture_id' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_shipping_info)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_shipping_info));
            } else {
                $httpBody = $update_shipping_info;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation captureOrder
     *
     * Create capture
     *
     * @param  string $order_id Order id (required)
     * @param  \Klarna\OrderManagement\Model\CaptureObject $capture_object Capture request data (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureOrder'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function captureOrder($order_id, $capture_object, $klarna_idempotency_key = null, string $contentType = self::contentTypes['captureOrder'][0])
    {
        $this->captureOrderWithHttpInfo($order_id, $capture_object, $klarna_idempotency_key, $contentType);
    }

    /**
     * Operation captureOrderWithHttpInfo
     *
     * Create capture
     *
     * @param  string $order_id Order id (required)
     * @param  \Klarna\OrderManagement\Model\CaptureObject $capture_object Capture request data (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureOrder'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function captureOrderWithHttpInfo($order_id, $capture_object, $klarna_idempotency_key = null, string $contentType = self::contentTypes['captureOrder'][0])
    {
        $request = $this->captureOrderRequest($order_id, $capture_object, $klarna_idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\CaptureNotAllowedErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation captureOrderAsync
     *
     * Create capture
     *
     * @param  string $order_id Order id (required)
     * @param  \Klarna\OrderManagement\Model\CaptureObject $capture_object Capture request data (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureOrderAsync($order_id, $capture_object, $klarna_idempotency_key = null, string $contentType = self::contentTypes['captureOrder'][0])
    {
        return $this->captureOrderAsyncWithHttpInfo($order_id, $capture_object, $klarna_idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation captureOrderAsyncWithHttpInfo
     *
     * Create capture
     *
     * @param  string $order_id Order id (required)
     * @param  \Klarna\OrderManagement\Model\CaptureObject $capture_object Capture request data (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureOrderAsyncWithHttpInfo($order_id, $capture_object, $klarna_idempotency_key = null, string $contentType = self::contentTypes['captureOrder'][0])
    {
        $returnType = '';
        $request = $this->captureOrderRequest($order_id, $capture_object, $klarna_idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'captureOrder'
     *
     * @param  string $order_id Order id (required)
     * @param  \Klarna\OrderManagement\Model\CaptureObject $capture_object Capture request data (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function captureOrderRequest($order_id, $capture_object, $klarna_idempotency_key = null, string $contentType = self::contentTypes['captureOrder'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling captureOrder'
            );
        }

        // verify the required parameter 'capture_object' is set
        if ($capture_object === null || (is_array($capture_object) && count($capture_object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_object when calling captureOrder'
            );
        }



        $resourcePath = '/ordermanagement/v1/orders/{order_id}/captures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($klarna_idempotency_key !== null) {
            $headerParams['Klarna-Idempotency-Key'] = ObjectSerializer::toHeaderValue($klarna_idempotency_key);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($capture_object)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($capture_object));
            } else {
                $httpBody = $capture_object;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation extendDueDate
     *
     * Extend the customer&#39;s payment due date
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\ExtendDueDateRequest $extend_due_date_request extend_due_date_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extendDueDate'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function extendDueDate($capture_id, $order_id, $klarna_idempotency_key = null, $extend_due_date_request = null, string $contentType = self::contentTypes['extendDueDate'][0])
    {
        $this->extendDueDateWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key, $extend_due_date_request, $contentType);
    }

    /**
     * Operation extendDueDateWithHttpInfo
     *
     * Extend the customer&#39;s payment due date
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\ExtendDueDateRequest $extend_due_date_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extendDueDate'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function extendDueDateWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key = null, $extend_due_date_request = null, string $contentType = self::contentTypes['extendDueDate'][0])
    {
        $request = $this->extendDueDateRequest($capture_id, $order_id, $klarna_idempotency_key, $extend_due_date_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\ErrorMessageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\ErrorMessageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extendDueDateAsync
     *
     * Extend the customer&#39;s payment due date
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\ExtendDueDateRequest $extend_due_date_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extendDueDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extendDueDateAsync($capture_id, $order_id, $klarna_idempotency_key = null, $extend_due_date_request = null, string $contentType = self::contentTypes['extendDueDate'][0])
    {
        return $this->extendDueDateAsyncWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key, $extend_due_date_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extendDueDateAsyncWithHttpInfo
     *
     * Extend the customer&#39;s payment due date
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\ExtendDueDateRequest $extend_due_date_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extendDueDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extendDueDateAsyncWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key = null, $extend_due_date_request = null, string $contentType = self::contentTypes['extendDueDate'][0])
    {
        $returnType = '';
        $request = $this->extendDueDateRequest($capture_id, $order_id, $klarna_idempotency_key, $extend_due_date_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extendDueDate'
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  \Klarna\OrderManagement\Model\ExtendDueDateRequest $extend_due_date_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extendDueDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extendDueDateRequest($capture_id, $order_id, $klarna_idempotency_key = null, $extend_due_date_request = null, string $contentType = self::contentTypes['extendDueDate'][0])
    {

        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling extendDueDate'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling extendDueDate'
            );
        }




        $resourcePath = '/ordermanagement/v1/orders/{order_id}/captures/{capture_id}/extend-due-date';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($klarna_idempotency_key !== null) {
            $headerParams['Klarna-Idempotency-Key'] = ObjectSerializer::toHeaderValue($klarna_idempotency_key);
        }

        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'capture_id' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($extend_due_date_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($extend_due_date_request));
            } else {
                $httpBody = $extend_due_date_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCapture
     *
     * Get capture
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCapture'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Klarna\OrderManagement\Model\Capture|\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage
     */
    public function getCapture($capture_id, $order_id, string $contentType = self::contentTypes['getCapture'][0])
    {
        list($response) = $this->getCaptureWithHttpInfo($capture_id, $order_id, $contentType);
        return $response;
    }

    /**
     * Operation getCaptureWithHttpInfo
     *
     * Get capture
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCapture'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Klarna\OrderManagement\Model\Capture|\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCaptureWithHttpInfo($capture_id, $order_id, string $contentType = self::contentTypes['getCapture'][0])
    {
        $request = $this->getCaptureRequest($capture_id, $order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Klarna\OrderManagement\Model\Capture' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Klarna\OrderManagement\Model\Capture' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Klarna\OrderManagement\Model\Capture', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Klarna\OrderManagement\Model\Capture';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\Capture',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCaptureAsync
     *
     * Get capture
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCapture'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCaptureAsync($capture_id, $order_id, string $contentType = self::contentTypes['getCapture'][0])
    {
        return $this->getCaptureAsyncWithHttpInfo($capture_id, $order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCaptureAsyncWithHttpInfo
     *
     * Get capture
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCapture'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCaptureAsyncWithHttpInfo($capture_id, $order_id, string $contentType = self::contentTypes['getCapture'][0])
    {
        $returnType = '\Klarna\OrderManagement\Model\Capture';
        $request = $this->getCaptureRequest($capture_id, $order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCapture'
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCapture'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCaptureRequest($capture_id, $order_id, string $contentType = self::contentTypes['getCapture'][0])
    {

        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling getCapture'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getCapture'
            );
        }


        $resourcePath = '/ordermanagement/v1/orders/{order_id}/captures/{capture_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'capture_id' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCaptures
     *
     * Get all captures for one order
     *
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCaptures'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Klarna\OrderManagement\Model\Capture[]|\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage
     */
    public function getCaptures($order_id, string $contentType = self::contentTypes['getCaptures'][0])
    {
        list($response) = $this->getCapturesWithHttpInfo($order_id, $contentType);
        return $response;
    }

    /**
     * Operation getCapturesWithHttpInfo
     *
     * Get all captures for one order
     *
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCaptures'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Klarna\OrderManagement\Model\Capture[]|\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCapturesWithHttpInfo($order_id, string $contentType = self::contentTypes['getCaptures'][0])
    {
        $request = $this->getCapturesRequest($order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Klarna\OrderManagement\Model\Capture[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Klarna\OrderManagement\Model\Capture[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Klarna\OrderManagement\Model\Capture[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Klarna\OrderManagement\Model\Capture[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\Capture[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\NoSuchOrderErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCapturesAsync
     *
     * Get all captures for one order
     *
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCaptures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCapturesAsync($order_id, string $contentType = self::contentTypes['getCaptures'][0])
    {
        return $this->getCapturesAsyncWithHttpInfo($order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCapturesAsyncWithHttpInfo
     *
     * Get all captures for one order
     *
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCaptures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCapturesAsyncWithHttpInfo($order_id, string $contentType = self::contentTypes['getCaptures'][0])
    {
        $returnType = '\Klarna\OrderManagement\Model\Capture[]';
        $request = $this->getCapturesRequest($order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCaptures'
     *
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCaptures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCapturesRequest($order_id, string $contentType = self::contentTypes['getCaptures'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getCaptures'
            );
        }


        $resourcePath = '/ordermanagement/v1/orders/{order_id}/captures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOptionsForExtendDueDate
     *
     * Get available options for extension of the customer&#39;s payment due date
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptionsForExtendDueDate'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Klarna\OrderManagement\Model\ExtendDueDateOptions|\Klarna\OrderManagement\Model\ErrorMessageDto
     */
    public function getOptionsForExtendDueDate($capture_id, $order_id, string $contentType = self::contentTypes['getOptionsForExtendDueDate'][0])
    {
        list($response) = $this->getOptionsForExtendDueDateWithHttpInfo($capture_id, $order_id, $contentType);
        return $response;
    }

    /**
     * Operation getOptionsForExtendDueDateWithHttpInfo
     *
     * Get available options for extension of the customer&#39;s payment due date
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptionsForExtendDueDate'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Klarna\OrderManagement\Model\ExtendDueDateOptions|\Klarna\OrderManagement\Model\ErrorMessageDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOptionsForExtendDueDateWithHttpInfo($capture_id, $order_id, string $contentType = self::contentTypes['getOptionsForExtendDueDate'][0])
    {
        $request = $this->getOptionsForExtendDueDateRequest($capture_id, $order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Klarna\OrderManagement\Model\ExtendDueDateOptions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Klarna\OrderManagement\Model\ExtendDueDateOptions' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Klarna\OrderManagement\Model\ExtendDueDateOptions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Klarna\OrderManagement\Model\ErrorMessageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Klarna\OrderManagement\Model\ErrorMessageDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Klarna\OrderManagement\Model\ErrorMessageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Klarna\OrderManagement\Model\ExtendDueDateOptions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\ExtendDueDateOptions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\ErrorMessageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOptionsForExtendDueDateAsync
     *
     * Get available options for extension of the customer&#39;s payment due date
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptionsForExtendDueDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOptionsForExtendDueDateAsync($capture_id, $order_id, string $contentType = self::contentTypes['getOptionsForExtendDueDate'][0])
    {
        return $this->getOptionsForExtendDueDateAsyncWithHttpInfo($capture_id, $order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOptionsForExtendDueDateAsyncWithHttpInfo
     *
     * Get available options for extension of the customer&#39;s payment due date
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptionsForExtendDueDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOptionsForExtendDueDateAsyncWithHttpInfo($capture_id, $order_id, string $contentType = self::contentTypes['getOptionsForExtendDueDate'][0])
    {
        $returnType = '\Klarna\OrderManagement\Model\ExtendDueDateOptions';
        $request = $this->getOptionsForExtendDueDateRequest($capture_id, $order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOptionsForExtendDueDate'
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptionsForExtendDueDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOptionsForExtendDueDateRequest($capture_id, $order_id, string $contentType = self::contentTypes['getOptionsForExtendDueDate'][0])
    {

        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling getOptionsForExtendDueDate'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getOptionsForExtendDueDate'
            );
        }


        $resourcePath = '/ordermanagement/v1/orders/{order_id}/captures/{capture_id}/extend-due-date-options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'capture_id' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation triggerSendOut
     *
     * Trigger resend of customer communication
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerSendOut'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function triggerSendOut($capture_id, $order_id, $klarna_idempotency_key = null, string $contentType = self::contentTypes['triggerSendOut'][0])
    {
        $this->triggerSendOutWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key, $contentType);
    }

    /**
     * Operation triggerSendOutWithHttpInfo
     *
     * Trigger resend of customer communication
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerSendOut'] to see the possible values for this operation
     *
     * @throws \Klarna\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function triggerSendOutWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key = null, string $contentType = self::contentTypes['triggerSendOut'][0])
    {
        $request = $this->triggerSendOutRequest($capture_id, $order_id, $klarna_idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\NotAllowedErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Klarna\OrderManagement\Model\NoSuchCaptureErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation triggerSendOutAsync
     *
     * Trigger resend of customer communication
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerSendOut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function triggerSendOutAsync($capture_id, $order_id, $klarna_idempotency_key = null, string $contentType = self::contentTypes['triggerSendOut'][0])
    {
        return $this->triggerSendOutAsyncWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation triggerSendOutAsyncWithHttpInfo
     *
     * Trigger resend of customer communication
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerSendOut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function triggerSendOutAsyncWithHttpInfo($capture_id, $order_id, $klarna_idempotency_key = null, string $contentType = self::contentTypes['triggerSendOut'][0])
    {
        $returnType = '';
        $request = $this->triggerSendOutRequest($capture_id, $order_id, $klarna_idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'triggerSendOut'
     *
     * @param  string $capture_id Capture id (required)
     * @param  string $order_id Order id (required)
     * @param  string $klarna_idempotency_key This header will guarantee the idempotency of the operation. The key should be unique and is recommended to be a UUID version 4. Retries of requests are safe to be applied in case of errors such as network errors, socket errors and timeouts. Input values of the operation are disregarded when evaluating the idempotency of the operation, only the key matters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerSendOut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function triggerSendOutRequest($capture_id, $order_id, $klarna_idempotency_key = null, string $contentType = self::contentTypes['triggerSendOut'][0])
    {

        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling triggerSendOut'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling triggerSendOut'
            );
        }



        $resourcePath = '/ordermanagement/v1/orders/{order_id}/captures/{capture_id}/trigger-send-out';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($klarna_idempotency_key !== null) {
            $headerParams['Klarna-Idempotency-Key'] = ObjectSerializer::toHeaderValue($klarna_idempotency_key);
        }

        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'capture_id' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
