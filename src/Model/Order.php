<?php
/**
 * Order
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Klarna\OrderManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klarna Order Management API
 *
 * The Order Management API is used for handling an order after the customer has completed the purchase. It is used for all actions you need to manage your orders. Examples being: updating, capturing, reading and refunding an order.  Read more on the [Order management](https://docs.klarna.com/order-management/) process.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Klarna\OrderManagement\Model;

use \ArrayAccess;
use \Klarna\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  Klarna\OrderManagement
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_address' => '\Klarna\OrderManagement\Model\Address',
        'captured_amount' => 'int',
        'captures' => '\Klarna\OrderManagement\Model\Capture[]',
        'created_at' => '\DateTime',
        'customer' => '\Klarna\OrderManagement\Model\Customer',
        'expires_at' => '\DateTime',
        'fraud_status' => 'string',
        'initial_payment_method' => '\Klarna\OrderManagement\Model\InitialPaymentMethodDto',
        'klarna_reference' => 'string',
        'locale' => 'string',
        'merchant_data' => 'string',
        'merchant_reference1' => 'string',
        'merchant_reference2' => 'string',
        'order_amount' => 'int',
        'order_id' => 'string',
        'order_lines' => '\Klarna\OrderManagement\Model\OrderLine[]',
        'original_order_amount' => 'int',
        'purchase_country' => 'string',
        'purchase_currency' => 'string',
        'refunded_amount' => 'int',
        'refunds' => '\Klarna\OrderManagement\Model\Refund[]',
        'remaining_authorized_amount' => 'int',
        'selected_shipping_option' => '\Klarna\OrderManagement\Model\SelectedShippingOptionDto',
        'shipping_address' => '\Klarna\OrderManagement\Model\Address',
        'shipping_info' => '\Klarna\OrderManagement\Model\ShippingInfo[]',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billing_address' => null,
        'captured_amount' => 'int64',
        'captures' => null,
        'created_at' => 'date-time',
        'customer' => null,
        'expires_at' => 'date-time',
        'fraud_status' => null,
        'initial_payment_method' => null,
        'klarna_reference' => null,
        'locale' => null,
        'merchant_data' => null,
        'merchant_reference1' => null,
        'merchant_reference2' => null,
        'order_amount' => 'int64',
        'order_id' => null,
        'order_lines' => null,
        'original_order_amount' => 'int64',
        'purchase_country' => null,
        'purchase_currency' => null,
        'refunded_amount' => 'int64',
        'refunds' => null,
        'remaining_authorized_amount' => 'int64',
        'selected_shipping_option' => null,
        'shipping_address' => null,
        'shipping_info' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'billing_address' => false,
        'captured_amount' => false,
        'captures' => false,
        'created_at' => false,
        'customer' => false,
        'expires_at' => false,
        'fraud_status' => false,
        'initial_payment_method' => false,
        'klarna_reference' => false,
        'locale' => false,
        'merchant_data' => false,
        'merchant_reference1' => false,
        'merchant_reference2' => false,
        'order_amount' => false,
        'order_id' => false,
        'order_lines' => false,
        'original_order_amount' => false,
        'purchase_country' => false,
        'purchase_currency' => false,
        'refunded_amount' => false,
        'refunds' => false,
        'remaining_authorized_amount' => false,
        'selected_shipping_option' => false,
        'shipping_address' => false,
        'shipping_info' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_address' => 'billing_address',
        'captured_amount' => 'captured_amount',
        'captures' => 'captures',
        'created_at' => 'created_at',
        'customer' => 'customer',
        'expires_at' => 'expires_at',
        'fraud_status' => 'fraud_status',
        'initial_payment_method' => 'initial_payment_method',
        'klarna_reference' => 'klarna_reference',
        'locale' => 'locale',
        'merchant_data' => 'merchant_data',
        'merchant_reference1' => 'merchant_reference1',
        'merchant_reference2' => 'merchant_reference2',
        'order_amount' => 'order_amount',
        'order_id' => 'order_id',
        'order_lines' => 'order_lines',
        'original_order_amount' => 'original_order_amount',
        'purchase_country' => 'purchase_country',
        'purchase_currency' => 'purchase_currency',
        'refunded_amount' => 'refunded_amount',
        'refunds' => 'refunds',
        'remaining_authorized_amount' => 'remaining_authorized_amount',
        'selected_shipping_option' => 'selected_shipping_option',
        'shipping_address' => 'shipping_address',
        'shipping_info' => 'shipping_info',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_address' => 'setBillingAddress',
        'captured_amount' => 'setCapturedAmount',
        'captures' => 'setCaptures',
        'created_at' => 'setCreatedAt',
        'customer' => 'setCustomer',
        'expires_at' => 'setExpiresAt',
        'fraud_status' => 'setFraudStatus',
        'initial_payment_method' => 'setInitialPaymentMethod',
        'klarna_reference' => 'setKlarnaReference',
        'locale' => 'setLocale',
        'merchant_data' => 'setMerchantData',
        'merchant_reference1' => 'setMerchantReference1',
        'merchant_reference2' => 'setMerchantReference2',
        'order_amount' => 'setOrderAmount',
        'order_id' => 'setOrderId',
        'order_lines' => 'setOrderLines',
        'original_order_amount' => 'setOriginalOrderAmount',
        'purchase_country' => 'setPurchaseCountry',
        'purchase_currency' => 'setPurchaseCurrency',
        'refunded_amount' => 'setRefundedAmount',
        'refunds' => 'setRefunds',
        'remaining_authorized_amount' => 'setRemainingAuthorizedAmount',
        'selected_shipping_option' => 'setSelectedShippingOption',
        'shipping_address' => 'setShippingAddress',
        'shipping_info' => 'setShippingInfo',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_address' => 'getBillingAddress',
        'captured_amount' => 'getCapturedAmount',
        'captures' => 'getCaptures',
        'created_at' => 'getCreatedAt',
        'customer' => 'getCustomer',
        'expires_at' => 'getExpiresAt',
        'fraud_status' => 'getFraudStatus',
        'initial_payment_method' => 'getInitialPaymentMethod',
        'klarna_reference' => 'getKlarnaReference',
        'locale' => 'getLocale',
        'merchant_data' => 'getMerchantData',
        'merchant_reference1' => 'getMerchantReference1',
        'merchant_reference2' => 'getMerchantReference2',
        'order_amount' => 'getOrderAmount',
        'order_id' => 'getOrderId',
        'order_lines' => 'getOrderLines',
        'original_order_amount' => 'getOriginalOrderAmount',
        'purchase_country' => 'getPurchaseCountry',
        'purchase_currency' => 'getPurchaseCurrency',
        'refunded_amount' => 'getRefundedAmount',
        'refunds' => 'getRefunds',
        'remaining_authorized_amount' => 'getRemainingAuthorizedAmount',
        'selected_shipping_option' => 'getSelectedShippingOption',
        'shipping_address' => 'getShippingAddress',
        'shipping_info' => 'getShippingInfo',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_AUTHORIZED = 'AUTHORIZED';
    public const STATUS_PART_CAPTURED = 'PART_CAPTURED';
    public const STATUS_CAPTURED = 'CAPTURED';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_EXPIRED = 'EXPIRED';
    public const STATUS_CLOSED = 'CLOSED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AUTHORIZED,
            self::STATUS_PART_CAPTURED,
            self::STATUS_CAPTURED,
            self::STATUS_CANCELLED,
            self::STATUS_EXPIRED,
            self::STATUS_CLOSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('captured_amount', $data ?? [], null);
        $this->setIfExists('captures', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('fraud_status', $data ?? [], null);
        $this->setIfExists('initial_payment_method', $data ?? [], null);
        $this->setIfExists('klarna_reference', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('merchant_data', $data ?? [], null);
        $this->setIfExists('merchant_reference1', $data ?? [], null);
        $this->setIfExists('merchant_reference2', $data ?? [], null);
        $this->setIfExists('order_amount', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order_lines', $data ?? [], null);
        $this->setIfExists('original_order_amount', $data ?? [], null);
        $this->setIfExists('purchase_country', $data ?? [], null);
        $this->setIfExists('purchase_currency', $data ?? [], null);
        $this->setIfExists('refunded_amount', $data ?? [], null);
        $this->setIfExists('refunds', $data ?? [], null);
        $this->setIfExists('remaining_authorized_amount', $data ?? [], null);
        $this->setIfExists('selected_shipping_option', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('shipping_info', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_address
     *
     * @return \Klarna\OrderManagement\Model\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Klarna\OrderManagement\Model\Address|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets captured_amount
     *
     * @return int|null
     */
    public function getCapturedAmount()
    {
        return $this->container['captured_amount'];
    }

    /**
     * Sets captured_amount
     *
     * @param int|null $captured_amount The total amount of all captures. In minor units.
     *
     * @return self
     */
    public function setCapturedAmount($captured_amount)
    {
        if (is_null($captured_amount)) {
            throw new \InvalidArgumentException('non-nullable captured_amount cannot be null');
        }
        $this->container['captured_amount'] = $captured_amount;

        return $this;
    }

    /**
     * Gets captures
     *
     * @return \Klarna\OrderManagement\Model\Capture[]|null
     */
    public function getCaptures()
    {
        return $this->container['captures'];
    }

    /**
     * Sets captures
     *
     * @param \Klarna\OrderManagement\Model\Capture[]|null $captures List of captures for this order.
     *
     * @return self
     */
    public function setCaptures($captures)
    {
        if (is_null($captures)) {
            throw new \InvalidArgumentException('non-nullable captures cannot be null');
        }
        $this->container['captures'] = $captures;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The time for the purchase. Formatted according to ISO 8601.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Klarna\OrderManagement\Model\Customer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Klarna\OrderManagement\Model\Customer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime|null $expires_at Order expiration time. The order can only be captured until this time. Formatted according to ISO 8601.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets fraud_status
     *
     * @return string|null
     */
    public function getFraudStatus()
    {
        return $this->container['fraud_status'];
    }

    /**
     * Sets fraud_status
     *
     * @param string|null $fraud_status Fraud status for the order. Either ACCEPTED, PENDING or REJECTED.
     *
     * @return self
     */
    public function setFraudStatus($fraud_status)
    {
        if (is_null($fraud_status)) {
            throw new \InvalidArgumentException('non-nullable fraud_status cannot be null');
        }
        $this->container['fraud_status'] = $fraud_status;

        return $this;
    }

    /**
     * Gets initial_payment_method
     *
     * @return \Klarna\OrderManagement\Model\InitialPaymentMethodDto|null
     */
    public function getInitialPaymentMethod()
    {
        return $this->container['initial_payment_method'];
    }

    /**
     * Sets initial_payment_method
     *
     * @param \Klarna\OrderManagement\Model\InitialPaymentMethodDto|null $initial_payment_method initial_payment_method
     *
     * @return self
     */
    public function setInitialPaymentMethod($initial_payment_method)
    {
        if (is_null($initial_payment_method)) {
            throw new \InvalidArgumentException('non-nullable initial_payment_method cannot be null');
        }
        $this->container['initial_payment_method'] = $initial_payment_method;

        return $this;
    }

    /**
     * Gets klarna_reference
     *
     * @return string|null
     */
    public function getKlarnaReference()
    {
        return $this->container['klarna_reference'];
    }

    /**
     * Sets klarna_reference
     *
     * @param string|null $klarna_reference A Klarna generated reference that is shorter than the Klarna Order Id and is used as a customer friendly reference. It is most often used as a reference when Klarna is communicating with the customer with regard to payment statuses.
     *
     * @return self
     */
    public function setKlarnaReference($klarna_reference)
    {
        if (is_null($klarna_reference)) {
            throw new \InvalidArgumentException('non-nullable klarna_reference cannot be null');
        }
        $this->container['klarna_reference'] = $klarna_reference;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale The customers locale. Specified according to RFC 1766.
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets merchant_data
     *
     * @return string|null
     */
    public function getMerchantData()
    {
        return $this->container['merchant_data'];
    }

    /**
     * Sets merchant_data
     *
     * @param string|null $merchant_data Text field for storing data about the order. Set at order creation.
     *
     * @return self
     */
    public function setMerchantData($merchant_data)
    {
        if (is_null($merchant_data)) {
            throw new \InvalidArgumentException('non-nullable merchant_data cannot be null');
        }
        $this->container['merchant_data'] = $merchant_data;

        return $this;
    }

    /**
     * Gets merchant_reference1
     *
     * @return string|null
     */
    public function getMerchantReference1()
    {
        return $this->container['merchant_reference1'];
    }

    /**
     * Sets merchant_reference1
     *
     * @param string|null $merchant_reference1 The order number that the merchant should assign to the order. This is how a customer would reference the purchase they made. If supplied, it is labeled as the Order Number within post purchase communications as well as the Klarna App.
     *
     * @return self
     */
    public function setMerchantReference1($merchant_reference1)
    {
        if (is_null($merchant_reference1)) {
            throw new \InvalidArgumentException('non-nullable merchant_reference1 cannot be null');
        }
        $this->container['merchant_reference1'] = $merchant_reference1;

        return $this;
    }

    /**
     * Gets merchant_reference2
     *
     * @return string|null
     */
    public function getMerchantReference2()
    {
        return $this->container['merchant_reference2'];
    }

    /**
     * Sets merchant_reference2
     *
     * @param string|null $merchant_reference2 Can be used to store your internal reference to the order. This is generally an internal reference number that merchants use as alternate identifier that matches their internal ERP or Order Management system.
     *
     * @return self
     */
    public function setMerchantReference2($merchant_reference2)
    {
        if (is_null($merchant_reference2)) {
            throw new \InvalidArgumentException('non-nullable merchant_reference2 cannot be null');
        }
        $this->container['merchant_reference2'] = $merchant_reference2;

        return $this;
    }

    /**
     * Gets order_amount
     *
     * @return int|null
     */
    public function getOrderAmount()
    {
        return $this->container['order_amount'];
    }

    /**
     * Sets order_amount
     *
     * @param int|null $order_amount The order amount in minor units. That is the smallest currency unit available such as cent or penny.
     *
     * @return self
     */
    public function setOrderAmount($order_amount)
    {
        if (is_null($order_amount)) {
            throw new \InvalidArgumentException('non-nullable order_amount cannot be null');
        }
        $this->container['order_amount'] = $order_amount;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id The unique order ID. Cannot be longer than 255 characters.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Klarna\OrderManagement\Model\OrderLine[]|null
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \Klarna\OrderManagement\Model\OrderLine[]|null $order_lines An array of order_line objects. Each line represents one item in the cart.
     *
     * @return self
     */
    public function setOrderLines($order_lines)
    {
        if (is_null($order_lines)) {
            throw new \InvalidArgumentException('non-nullable order_lines cannot be null');
        }
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets original_order_amount
     *
     * @return int|null
     */
    public function getOriginalOrderAmount()
    {
        return $this->container['original_order_amount'];
    }

    /**
     * Sets original_order_amount
     *
     * @param int|null $original_order_amount The original order amount. In minor units.
     *
     * @return self
     */
    public function setOriginalOrderAmount($original_order_amount)
    {
        if (is_null($original_order_amount)) {
            throw new \InvalidArgumentException('non-nullable original_order_amount cannot be null');
        }
        $this->container['original_order_amount'] = $original_order_amount;

        return $this;
    }

    /**
     * Gets purchase_country
     *
     * @return string|null
     */
    public function getPurchaseCountry()
    {
        return $this->container['purchase_country'];
    }

    /**
     * Sets purchase_country
     *
     * @param string|null $purchase_country The purchase country. Formatted according to ISO 3166-1 alpha-2.
     *
     * @return self
     */
    public function setPurchaseCountry($purchase_country)
    {
        if (is_null($purchase_country)) {
            throw new \InvalidArgumentException('non-nullable purchase_country cannot be null');
        }
        $this->container['purchase_country'] = $purchase_country;

        return $this;
    }

    /**
     * Gets purchase_currency
     *
     * @return string|null
     */
    public function getPurchaseCurrency()
    {
        return $this->container['purchase_currency'];
    }

    /**
     * Sets purchase_currency
     *
     * @param string|null $purchase_currency The currency for this order. Specified in ISO 4217 format.
     *
     * @return self
     */
    public function setPurchaseCurrency($purchase_currency)
    {
        if (is_null($purchase_currency)) {
            throw new \InvalidArgumentException('non-nullable purchase_currency cannot be null');
        }
        $this->container['purchase_currency'] = $purchase_currency;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return int|null
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param int|null $refunded_amount The total amount of refunded for this order. In minor units.
     *
     * @return self
     */
    public function setRefundedAmount($refunded_amount)
    {
        if (is_null($refunded_amount)) {
            throw new \InvalidArgumentException('non-nullable refunded_amount cannot be null');
        }
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \Klarna\OrderManagement\Model\Refund[]|null
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \Klarna\OrderManagement\Model\Refund[]|null $refunds List of refunds for this order.
     *
     * @return self
     */
    public function setRefunds($refunds)
    {
        if (is_null($refunds)) {
            throw new \InvalidArgumentException('non-nullable refunds cannot be null');
        }
        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets remaining_authorized_amount
     *
     * @return int|null
     */
    public function getRemainingAuthorizedAmount()
    {
        return $this->container['remaining_authorized_amount'];
    }

    /**
     * Sets remaining_authorized_amount
     *
     * @param int|null $remaining_authorized_amount The remaining authorized amount for this order. To increase the `remaining_authorized_amount` the `order_amount` needs to be increased.
     *
     * @return self
     */
    public function setRemainingAuthorizedAmount($remaining_authorized_amount)
    {
        if (is_null($remaining_authorized_amount)) {
            throw new \InvalidArgumentException('non-nullable remaining_authorized_amount cannot be null');
        }
        $this->container['remaining_authorized_amount'] = $remaining_authorized_amount;

        return $this;
    }

    /**
     * Gets selected_shipping_option
     *
     * @return \Klarna\OrderManagement\Model\SelectedShippingOptionDto|null
     */
    public function getSelectedShippingOption()
    {
        return $this->container['selected_shipping_option'];
    }

    /**
     * Sets selected_shipping_option
     *
     * @param \Klarna\OrderManagement\Model\SelectedShippingOptionDto|null $selected_shipping_option selected_shipping_option
     *
     * @return self
     */
    public function setSelectedShippingOption($selected_shipping_option)
    {
        if (is_null($selected_shipping_option)) {
            throw new \InvalidArgumentException('non-nullable selected_shipping_option cannot be null');
        }
        $this->container['selected_shipping_option'] = $selected_shipping_option;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \Klarna\OrderManagement\Model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \Klarna\OrderManagement\Model\Address|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_info
     *
     * @return \Klarna\OrderManagement\Model\ShippingInfo[]|null
     */
    public function getShippingInfo()
    {
        return $this->container['shipping_info'];
    }

    /**
     * Sets shipping_info
     *
     * @param \Klarna\OrderManagement\Model\ShippingInfo[]|null $shipping_info Shipping information for this order.
     *
     * @return self
     */
    public function setShippingInfo($shipping_info)
    {
        if (is_null($shipping_info)) {
            throw new \InvalidArgumentException('non-nullable shipping_info cannot be null');
        }
        $this->container['shipping_info'] = $shipping_info;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The order status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


